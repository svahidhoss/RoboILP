/* Generated By:JavaCC: Do not edit this line. RobocupCmdParser.java */
  package roboILP;
  import java.io.*;

  public class RobocupCmdParser implements ICmdParser, RobocupCmdParserConstants {

    RobocupController controller;

    public void parseSeeCommand (String cmd, Controller controller)
        throws ParseException{
      ReInit(new StringReader(cmd));
      this.controller = (RobocupController)controller;
      startSeeCommand();
    }
    public void parseHearCommand (String cmd, Controller controller)
        throws ParseException{
      ReInit(new StringReader(cmd));
      this.controller = (RobocupController)controller;
      startHearCommand();
    }
    public void parseInitCommand (String cmd, Controller controller)
        throws ParseException{
      ReInit(new StringReader(cmd));
      this.controller = (RobocupController)controller;
      startInitCommand();
    }
    public void parseActionCommand (String cmd, Controller controller)
        throws ParseException{
      ReInit(new StringReader(cmd));
      this.controller = (RobocupController)controller;
      startActionCommand();
    }
    public void parseErrorCommand (String cmd)
        throws ParseException{
      ReInit(new StringReader(cmd));
      this.controller = null;
//      startErrorCommand();
    }
    public void parseSenseBodyCommand (String cmd, Controller controller)
        throws ParseException{
      ReInit(new StringReader(cmd));
      this.controller = (RobocupController)controller;
//      startSenseBodyCommand();
    }

  final public void startSeeCommand() throws ParseException {
   ObjectInfo name=null; Token time=null;
    time = jj_consume_token(NUM);
    if (jj_2_3(2)) {
      jj_consume_token(SEP);
      label_1:
      while (true) {
        jj_consume_token(OB);
        name = objInfo(time);
        jj_consume_token(CB);
        if (jj_2_1(2)) {
          jj_consume_token(SEP);
        } else {
          ;
        }
        if (jj_2_2(2)) {
          ;
        } else {
          break label_1;
        }
      }
    } else {
      ;
    }

  }

  final public ObjectInfo objInfo(Token time) throws ParseException {
   ObjectInfo name; Token p1=null; Token p2=null; Token p3=null; Token p4=null; Token p5=null; Token p6=null;
    jj_consume_token(OB);
    name = objName();
    if (jj_2_4(2)) {
      jj_consume_token(SEP);
    } else {
      ;
    }
    jj_consume_token(CB);
    if (jj_2_5(2)) {
      jj_consume_token(SEP);
    } else {
      ;
    }
    if (jj_2_6(2)) {
      p1 = jj_consume_token(NUM);
    } else if (jj_2_7(2)) {
      jj_consume_token(NAN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_8(2)) {
      jj_consume_token(SEP);
    } else {
      ;
    }
    if (jj_2_14(2)) {
      p2 = jj_consume_token(NUM);
      if (jj_2_9(2)) {
        jj_consume_token(SEP);
      } else {
        ;
      }
      if (jj_2_13(2)) {
        p3 = jj_consume_token(NUM);
        jj_consume_token(SEP);
        p4 = jj_consume_token(NUM);
        if (jj_2_10(2)) {
          jj_consume_token(SEP);
        } else {
          ;
        }
        if (jj_2_12(2)) {
          p5 = jj_consume_token(NUM);
          jj_consume_token(SEP);
          p6 = jj_consume_token(NUM);
          if (jj_2_11(2)) {
            jj_consume_token(SEP);
          } else {
            ;
          }
        } else {
          ;
        }
      } else {
        ;
      }
    } else {
      ;
    }
      Double dDir;
      Double dDist;
      Double dDistChg;
      Double dDirChg;
      Double dBodyFaceDir;
      Double dHeadFaceDir;
      if (p1 != null) {
        if (p2 == null) {
          dDir = new Double(p1.toString());
          name.setDirection(dDir.doubleValue());
        }
        else {
          dDist = new Double(p1.toString());
          dDir = new Double(p2.toString());
          name.setDistance(dDist.doubleValue());
          name.setDirection(dDir.doubleValue());
          if (p3 != null) {
            dDistChg = new Double(p3.toString());
            dDirChg = new Double(p4.toString());
            name.setDistChg(dDistChg.doubleValue());
            name.setDirChg(dDirChg.doubleValue());
            if (p5 != null) {
              dBodyFaceDir = new Double(p5.toString());
              dHeadFaceDir = new Double(p6.toString());
              ((RobocupPlayerInfo)name).m_bodyFaceDir = dBodyFaceDir.doubleValue();
              ((RobocupPlayerInfo)name).m_headFaceDir = dHeadFaceDir.doubleValue();
            }
          }
        }

        Integer iNum = new Integer(time.toString());
        name.m_time = iNum.intValue();
//	name.print();
        controller.addObject(name);

/*
        if (player.isTeamEast()) {
          name.infoSeeFromEast(controller, dDist.doubleValue(), dDir.doubleValue());
        }
        else {
          name.infoSeeFromWest(controller, dDist.doubleValue(), dDir.doubleValue());
        }
*/
      }

      {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public ObjectInfo objName() throws ParseException {
   Token name; Token num; ObjectInfo objName=null;
   Token player=null; Token ball=null; Token flag=null; Token line=null; Token goal=null;
    if (jj_2_17(2)) {
      player = jj_consume_token(PLAYER);
      if (jj_2_16(2)) {
        if (jj_2_15(2)) {
          jj_consume_token(SEP);
        } else {
          ;
        }
        objName = objNamePlayer();
      } else {
        ;
      }
      char firstChar = player.image.charAt(0);
      if (objName==null) {
        objName = new RobocupPlayerInfo("", -1);
      }
      objName.m_inViewConeP = (firstChar == 'p');
      {if (true) return objName;}
    } else if (jj_2_18(2)) {
      ball = jj_consume_token(BALL);
      char firstChar = ball.image.charAt(0);
      objName = new RobocupBallInfo();
      objName.m_inViewConeP = (firstChar == 'b');
      {if (true) return objName;}
    } else if (jj_2_19(2)) {
      flag = jj_consume_token(FLAG);
      String str[]      = flag.image.split(" ");
//      System.out.println("flag found: " + flag.image);

      boolean inView    = (flag.image.charAt(0) == 'f');
      if(str.length == 2) {
        char pos1       = str[1].charAt(0);
        {if (true) return new RobocupFlagInfo(' ',pos1,' ',0,inView);}
      } else
      if(str.length == 3) {
        char pos1       = str[1].charAt(0);
        char pos2       = str[2].charAt(0);
        {if (true) return new RobocupFlagInfo(' ',pos1,pos2,0,inView);}
      } else
      if(str.length == 4) {
        if(str[3].length() == 1) {
          char type     = str[1].charAt(0);
          char pos1     = str[2].charAt(0);
          char pos2     = str[3].charAt(0);
          {if (true) return new RobocupFlagInfo(type,pos1,pos2,0,inView);}
        } else {
          char pos1     = str[1].charAt(0);
          char pos2     = str[2].charAt(0);
          int  iNum     = Integer.parseInt(str[3]);
          {if (true) return new RobocupFlagInfo(' ',pos1,pos2,iNum,inView);}
        }
      } else {if (true) return new RobocupFlagInfo();}
    } else if (jj_2_20(2)) {
      line = jj_consume_token(LINE);
      String[] str = line.image.split(" ");
      char firstChar = str[0].charAt(0);
      char type = str[1].charAt(0);
      objName = new RobocupLineInfo(type);
      objName.m_inViewConeP = (firstChar == 'l');
      {if (true) return objName;}
    } else if (jj_2_21(2)) {
      goal = jj_consume_token(GOAL);
      String[] str = goal.image.split(" ");
      char firstChar = str[0].charAt(0);
      char side = str[1].charAt(0);
      objName = new RobocupGoalInfo(side);
      objName.m_inViewConeP = true;
      {if (true) return objName;}
    } else if (jj_2_22(2)) {
      goal = jj_consume_token(UNK_GOAL);
      System.out.println("Unknown Goal found");
      objName = new RobocupGoalInfo();
      objName.m_inViewConeP = false;
      {if (true) return objName;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ObjectInfo objNamePlayer() throws ParseException {
   Token name=null; Token num=null; ObjectInfo objName=null; Token goalie=null;
    name = jj_consume_token(NAM);
    if (jj_2_23(2)) {
      jj_consume_token(SEP);
      num = jj_consume_token(NUM);
    } else {
      ;
    }
    if (jj_2_24(2)) {
      jj_consume_token(SEP);
      goalie = jj_consume_token(NAM);
    } else {
      ;
    }
      Integer iNum;
      if (num==null) iNum = new Integer(-1);
      else  iNum = new Integer(num.toString());

      // TODO: ignore goalie for now
      {if (true) return new RobocupPlayerInfo(name.toString(), iNum.intValue());}
    throw new Error("Missing return statement in function");
  }

  final public void startInitCommand() throws ParseException {
   Token name=null;
    name = jj_consume_token(INIT);
      String str[] = name.image.split(" ");
      char side = name.image.charAt(0);
      int  num  = Integer.parseInt(str[1]);

      RoboILP.println(3,"startInitCommand: " + side + ", " + num);
      controller.setSide(side);
      controller.setPlayerNum(num);
  }

  final public void startActionCommand() throws ParseException {
   Token p1=null; Token p2=null; Double dNum1, dNum2;
    p1 = jj_consume_token(NUM);
    if (jj_2_25(2)) {
      jj_consume_token(SEP);
      p2 = jj_consume_token(NUM);
    } else {
      ;
    }
      dNum1 = new Double(p1.toString());
      controller.setActionP1(dNum1.doubleValue());
      if (p2!=null) {
        dNum2 = new Double(p2.toString());
        controller.setActionP2(dNum2.doubleValue());
      }
  }

  final public void startHearCommand() throws ParseException {
   Token num;Token msg;
    jj_consume_token(NUM);
    jj_consume_token(SEP);
    if (jj_2_26(2)) {
      jj_consume_token(SELF);
    } else if (jj_2_27(2)) {
      jj_consume_token(REFEREE);
      jj_consume_token(SEP);
      hearReferee();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void hearReferee() throws ParseException {
   int playMode=-1; int refereeMessage=-1;
    if (jj_2_28(2)) {
      playMode = playMode();
      RoboILP.println(3,"hearRefere: playerMode");
      controller.infoHearPlayMode(playMode);
    } else if (jj_2_29(2)) {
      refereeMessage = refereeMessage();
      RoboILP.println(3,"hearRefere: refereeMessage");
      controller.infoHearReferee(refereeMessage);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public int playMode() throws ParseException {
    if (jj_2_30(2)) {
      jj_consume_token(BEFORE_KICK_OFF);
      {if (true) return RobocupController.PLAY_MODE_BEFORE_KICK_OFF;}
    } else if (jj_2_31(2)) {
      jj_consume_token(TIME_OVER);
      {if (true) return RobocupController.PLAY_MODE_TIME_OVER;}
    } else if (jj_2_32(2)) {
      jj_consume_token(PLAY_ON);
      {if (true) return RobocupController.PLAY_MODE_PLAY_ON;}
    } else if (jj_2_33(2)) {
      jj_consume_token(KICK_OFF_L);
      if (controller.getSide() == 'r')
        {if (true) return RobocupController.PLAY_MODE_KICK_OFF_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_KICK_OFF_OWN;}
    } else if (jj_2_34(2)) {
      jj_consume_token(KICK_OFF_R);
      if (controller.getSide() != 'r')
        {if (true) return RobocupController.PLAY_MODE_KICK_OFF_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_KICK_OFF_OWN;}
    } else if (jj_2_35(2)) {
      jj_consume_token(KICK_IN_L);
      if (controller.getSide() == 'r')
        {if (true) return RobocupController.PLAY_MODE_KICK_IN_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_KICK_IN_OWN;}
    } else if (jj_2_36(2)) {
      jj_consume_token(KICK_IN_R);
      if (controller.getSide() != 'r')
        {if (true) return RobocupController.PLAY_MODE_KICK_IN_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_KICK_IN_OWN;}
    } else if (jj_2_37(2)) {
      jj_consume_token(FREE_KICK_FAULT_R);
      RoboILP.println(3,"playMode: free_kick_fault_r; side: " + controller.getSide());
      if (controller.getSide() != 'r')
        {if (true) return RobocupController.PLAY_MODE_FREE_KICK_FAULT_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_FREE_KICK_FAULT_OWN;}
    } else if (jj_2_38(2)) {
      jj_consume_token(FREE_KICK_FAULT_L);
      RoboILP.println(3,"playMode: free_kick_fault_l; side: " + controller.getSide());
      if (controller.getSide() == 'r')
        {if (true) return RobocupController.PLAY_MODE_FREE_KICK_FAULT_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_FREE_KICK_FAULT_OWN;}
    } else if (jj_2_39(2)) {
      jj_consume_token(FREE_KICK_R);
      RoboILP.println(3,"playMode: free_kick_r; side: " + controller.getSide());
      if (controller.getSide() != 'r')
        {if (true) return RobocupController.PLAY_MODE_FREE_KICK_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_FREE_KICK_OWN;}
    } else if (jj_2_40(2)) {
      jj_consume_token(FREE_KICK_L);
      RoboILP.println(3,"playMode: free_kick_l; side: " + controller.getSide());
      if (controller.getSide() == 'r')
        {if (true) return RobocupController.PLAY_MODE_FREE_KICK_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_FREE_KICK_OWN;}
    } else if (jj_2_41(2)) {
      jj_consume_token(CORNER_KICK_R);
      if (controller.getSide() != 'r')
        {if (true) return RobocupController.PLAY_MODE_CORNER_KICK_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_CORNER_KICK_OWN;}
    } else if (jj_2_42(2)) {
      jj_consume_token(CORNER_KICK_L);
      if (controller.getSide() == 'r')
        {if (true) return RobocupController.PLAY_MODE_CORNER_KICK_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_CORNER_KICK_OWN;}
    } else if (jj_2_43(2)) {
      jj_consume_token(GOAL_KICK_R);
      if (controller.getSide() != 'r')
        {if (true) return RobocupController.PLAY_MODE_GOAL_KICK_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_GOAL_KICK_OWN;}
    } else if (jj_2_44(2)) {
      jj_consume_token(GOAL_KICK_L);
      if (controller.getSide() == 'r')
        {if (true) return RobocupController.PLAY_MODE_GOAL_KICK_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_GOAL_KICK_OWN;}
    } else if (jj_2_45(2)) {
      jj_consume_token(GOAL_R);
      if (controller.getSide() != 'r')
        {if (true) return RobocupController.PLAY_MODE_GOAL_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_GOAL_OWN;}
    } else if (jj_2_46(2)) {
      jj_consume_token(GOAL_L);
      if (controller.getSide() == 'r')
        {if (true) return RobocupController.PLAY_MODE_GOAL_OTHER;}
      else
        {if (true) return RobocupController.PLAY_MODE_GOAL_OWN;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int refereeMessage() throws ParseException {
    if (jj_2_47(2)) {
      jj_consume_token(OFFSIDE_R);
      if (controller.getSide() != 'r')
        {if (true) return RobocupController.REFREE_MESSAGE_OFFSIDE_OTHER;}
      else
        {if (true) return RobocupController.REFREE_MESSAGE_OFFSIDE_OWN;}
    } else if (jj_2_48(2)) {
      jj_consume_token(OFFSIDE_L);
      if (controller.getSide() == 'r')
        {if (true) return RobocupController.REFREE_MESSAGE_OFFSIDE_OTHER;}
      else
        {if (true) return RobocupController.REFREE_MESSAGE_OFFSIDE_OWN;}
    } else if (jj_2_49(2)) {
      jj_consume_token(FOUL_R);
      if (controller.getSide() != 'r')
        {if (true) return RobocupController.REFREE_MESSAGE_FOUL_OTHER;}
      else
        {if (true) return RobocupController.REFREE_MESSAGE_FOUL_OWN;}
    } else if (jj_2_50(2)) {
      jj_consume_token(FOUL_L);
      if (controller.getSide() == 'r')
        {if (true) return RobocupController.REFREE_MESSAGE_FOUL_OTHER;}
      else
        {if (true) return RobocupController.REFREE_MESSAGE_FOUL_OWN;}
    } else if (jj_2_51(2)) {
      jj_consume_token(HALF_TIME);
        {if (true) return RobocupController.REFREE_MESSAGE_HALF_TIME;}
    } else if (jj_2_52(2)) {
      jj_consume_token(DROP_BALL);
        {if (true) return RobocupController.REFREE_MESSAGE_DROP_BALL;}
    } else if (jj_2_53(2)) {
      jj_consume_token(TIME_UP);
        {if (true) return RobocupController.REFREE_MESSAGE_TIME_UP;}
    } else if (jj_2_54(2)) {
      jj_consume_token(TIME_UP_WITHOUT_A_TEAM);
        {if (true) return RobocupController.REFREE_MESSAGE_TIME_UP_WITHOUT_A_TEAM;}
    } else if (jj_2_55(2)) {
      jj_consume_token(TIME_EXTENDED);
        {if (true) return RobocupController.REFREE_MESSAGE_TIME_EXTENDED;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_3_8() {
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(PLAYER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(SEP)) return true;
    if (jj_scan_token(NAM)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(FREE_KICK_R)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(NAN)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(TIME_EXTENDED)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(FREE_KICK_FAULT_L)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(TIME_UP_WITHOUT_A_TEAM)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(TIME_UP)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(FREE_KICK_FAULT_R)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(SEP)) return true;
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(DROP_BALL)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(HALF_TIME)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(KICK_IN_R)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(FOUL_L)) return true;
    return false;
  }

  private boolean jj_3R_3() {
    if (jj_scan_token(NAM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(KICK_IN_L)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(FOUL_R)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(KICK_OFF_R)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(UNK_GOAL)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(OFFSIDE_L)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(OB)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(KICK_OFF_L)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(PLAY_ON)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(OFFSIDE_R)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(GOAL)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(NUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(SEP)) return true;
    Token xsp;
    if (jj_3_2()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(TIME_OVER)) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(BEFORE_KICK_OFF)) return true;
    return false;
  }

  private boolean jj_3R_2() {
    if (jj_scan_token(OB)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(LINE)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(GOAL_L)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(GOAL_R)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(GOAL_KICK_L)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(REFEREE)) return true;
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(SELF)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(GOAL_KICK_R)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(CORNER_KICK_L)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(SEP)) return true;
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(FLAG)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(CORNER_KICK_R)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(BALL)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(FREE_KICK_L)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RobocupCmdParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[55];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RobocupCmdParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RobocupCmdParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobocupCmdParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RobocupCmdParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobocupCmdParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RobocupCmdParser(RobocupCmdParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RobocupCmdParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 55; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
