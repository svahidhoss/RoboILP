/* Generated By:JavaCC: Do not edit this line. RobocupCmdParserTokenManager.java */
package roboILP;
import java.io.*;

/** Token Manager. */
public class RobocupCmdParserTokenManager implements RobocupCmdParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x303c00000000L) != 0L)
         {
            jjmatchedKind = 5;
            return 23;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 4;
            return 3;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 93;
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 57;
            return 45;
         }
         if ((active0 & 0x30000000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 77;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 6;
            return 33;
         }
         if ((active1 & 0x2L) != 0L)
            return 70;
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 57;
            return 109;
         }
         if ((active0 & 0x10fc0c3ebffb800L) != 0L)
         {
            jjmatchedKind = 57;
            return 110;
         }
         return -1;
      case 1:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 32;
         }
         if ((active0 & 0x10ff0ffeffffa00L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 110;
         }
         if ((active0 & 0x30000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 76;
         }
         return -1;
      case 2:
         if ((active0 & 0xff0ffeeffba00L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
            return 110;
         }
         if ((active0 & 0x30000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
            return 75;
         }
         if ((active0 & 0x100000001004000L) != 0L)
            return 110;
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
            return 31;
         }
         return -1;
      case 3:
         if ((active0 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 3;
            }
            return 30;
         }
         if ((active0 & 0xff0fc2c1f1000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 3;
            }
            return 110;
         }
         if ((active0 & 0x3c2e0aa00L) != 0L)
            return 110;
         if ((active0 & 0x30000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 3;
            }
            return 81;
         }
         return -1;
      case 4:
         if ((active0 & 0xff0fffe171000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
            return 110;
         }
         if ((active0 & 0x80000L) != 0L)
            return 110;
         if ((active0 & 0x30000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
            return 80;
         }
         return -1;
      case 5:
         if ((active0 & 0xfc3fffe141000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
            return 110;
         }
         if ((active0 & 0x300000030000L) != 0L)
            return 110;
         return -1;
      case 6:
         if ((active0 & 0x9c3ffee101000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 6;
            }
            return 110;
         }
         if ((active0 & 0x6000010040000L) != 0L)
            return 110;
         return -1;
      case 7:
         if ((active0 & 0xdc3ffee101000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 7;
            return 110;
         }
         return -1;
      case 8:
         if ((active0 & 0xc03fcc4100000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
            return 110;
         }
         if ((active0 & 0x1c0032a001000L) != 0L)
            return 110;
         return -1;
      case 9:
         if ((active0 & 0xc0100000L) != 0L)
            return 110;
         if ((active0 & 0xc03fc04000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 9;
            return 110;
         }
         return -1;
      case 10:
         if ((active0 & 0xc00f004000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 10;
            return 110;
         }
         if ((active0 & 0x30c00000000L) != 0L)
            return 110;
         return -1;
      case 11:
         if ((active0 & 0xc00f004000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 11;
            return 110;
         }
         return -1;
      case 12:
         if ((active0 & 0x4003004000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 12;
            return 110;
         }
         if ((active0 & 0x800c000000000L) != 0L)
            return 110;
         return -1;
      case 13:
         if ((active0 & 0x4003004000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 13;
            return 110;
         }
         return -1;
      case 14:
         if ((active0 & 0x4000000L) != 0L)
            return 110;
         if ((active0 & 0x4003000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 14;
            return 110;
         }
         return -1;
      case 15:
         if ((active0 & 0x4003000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 15;
            return 110;
         }
         return -1;
      case 16:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 16;
            return 110;
         }
         if ((active0 & 0x3000000000L) != 0L)
            return 110;
         return -1;
      case 17:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 17;
            return 110;
         }
         return -1;
      case 18:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 18;
            return 110;
         }
         return -1;
      case 19:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 19;
            return 110;
         }
         return -1;
      case 20:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 20;
            return 110;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         return jjStartNfaWithStates_0(0, 55, 93);
      case 34:
         return jjStartNfaWithStates_0(0, 65, 70);
      case 40:
         return jjStopAtPos(0, 53);
      case 41:
         return jjStopAtPos(0, 54);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xc000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x20400000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x303c00000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x30000000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x1000000102000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x3c0200000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100000000030000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0xc00000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10c0800L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xe00000a800000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x101000001410000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4100800L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0003c820b000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x33c000024200L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x3c20000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x30010140200L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x3c0200000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x3c00081000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00004000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000800L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0xe000008000000L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 110);
         break;
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0xc002830000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000000L);
      case 119:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 110);
         break;
      case 121:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 110);
         return jjMoveStringLiteralDfa4_0(active0, 0xe003c08080000L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 110);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 110);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 110);
         break;
      case 107:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3c0000000L);
      case 108:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 110);
         return jjMoveStringLiteralDfa4_0(active0, 0x330000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xc002000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0xf333ffa101000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 110);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000040000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000004000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000000L);
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0x33c00000000L);
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 110);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 110);
         break;
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x2040000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0xd8000000L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 110);
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000000000L);
      case 119:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0xc004000000L);
      case 97:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 110);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0xc00002000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1033c00000000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 110);
         return jjMoveStringLiteralDfa7_0(active0, 0x300100000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 112:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x4c00300000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x33c02000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0xc004000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 12, 110);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 110);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0xc004000000L);
      case 107:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 110);
         return jjMoveStringLiteralDfa9_0(active0, 0x33c00000000L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 110);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 110);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 110);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 110);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 110);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 110);
         break;
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x33c00000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0xc004000000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 20, 110);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 30, 110);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x3000000000L);
      case 107:
         return jjMoveStringLiteralDfa11_0(active0, 0xc004000000L);
      case 108:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 35, 110);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 110);
         break;
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(10, 34, 110);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 40, 110);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0xc004000000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x3000000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L);
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 51, 110);
         break;
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 39, 110);
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000004000000L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 38, 110);
         break;
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x3000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x3000000000L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(14, 26, 110);
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x4003000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0x4003000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000L);
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 37, 110);
         break;
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 36, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 109:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 50, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 109;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  break;
               case 0:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(73);
                  }
                  else if (curChar == 32)
                     jjAddStates(0, 3);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if (curChar == 32)
                     jjCheckNAdd(68);
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  break;
               case 9:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 11:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if (curChar != 48)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 32)
                     jjAddStates(4, 9);
                  break;
               case 15:
                  if (curChar == 48 && kind > 5)
                     kind = 5;
                  break;
               case 16:
                  if (curChar == 49)
                     jjCheckNAdd(15);
                  break;
               case 17:
                  if (curChar == 50)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 51)
                     jjCheckNAdd(15);
                  break;
               case 19:
                  if (curChar == 52)
                     jjCheckNAdd(15);
                  break;
               case 20:
                  if (curChar == 53)
                     jjCheckNAdd(15);
                  break;
               case 41:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 51:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 67:
                  if (curChar == 32)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar == 34 && kind > 57)
                     kind = 57;
                  break;
               case 73:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(73);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 92:
                  if (curChar == 32)
                     jjAddStates(0, 3);
                  break;
               case 94:
                  if (curChar == 32)
                     jjCheckNAdd(95);
                  break;
               case 95:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(95);
                  break;
               case 97:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 102:
                  if (curChar == 32)
                     jjCheckNAdd(103);
                  break;
               case 103:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(103);
                  break;
               case 105:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 107:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if ((0x4100000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(51);
                  else if ((0x1000000010000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if ((0x4000000040L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(9);
                  }
                  else if ((0x400000004L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 48;
                  if (curChar == 103)
                     jjAddStates(10, 12);
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 108)
                     jjCheckNAdd(41);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 80:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 85;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 88;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if (curChar == 108)
                     jjCheckNAdd(51);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 101)
                     jjCheckNAdd(29);
                  break;
               case 109:
               case 71:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddTwoStates(71, 72);
                  break;
               case 93:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 90;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 83;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 87;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 110:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddTwoStates(71, 72);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(71, 72);
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 1:
                  if (curChar == 108 && kind > 4)
                     kind = 4;
                  break;
               case 2:
               case 5:
                  if (curChar == 108)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x4000000040L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if ((0x15108c00000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if ((0x15108c00000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x10000c00000000L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 21:
                  if (curChar != 103)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(9);
                  break;
               case 22:
               case 25:
                  if (curChar == 97)
                     jjCheckNAdd(21);
                  break;
               case 24:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x1000000010000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 29:
                  if (curChar == 114 && kind > 6)
                     kind = 6;
                  break;
               case 34:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 101)
                     jjCheckNAdd(29);
                  break;
               case 36:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 108)
                     jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x14100400000000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 43:
                  if (curChar == 101)
                     jjCheckNAdd(41);
                  break;
               case 44:
               case 47:
                  if (curChar == 110)
                     jjCheckNAdd(43);
                  break;
               case 46:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 48:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x4100000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 53:
                  if (curChar == 101 && kind > 10)
                     kind = 10;
                  break;
               case 54:
               case 60:
                  if (curChar == 101)
                     jjCheckNAdd(53);
                  break;
               case 55:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x4100000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddTwoStates(71, 72);
                  break;
               case 74:
                  if (curChar == 103)
                     jjAddStates(10, 12);
                  break;
               case 78:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 82:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 87:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 88:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 96:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 98:
                  if ((0x7fffffe00000000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 99:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 101:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 106:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 108:
                  if ((0x7fffffe00000000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 109 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   93, 96, 99, 104, 14, 16, 17, 18, 19, 20, 77, 84, 91, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\107\157\141\154", null, 
"\163\145\154\146", "\166\151\145\167\137\155\157\144\145", "\150\151\147\150", "\154\157\167", 
"\167\151\144\145", "\156\141\162\162\157\167", "\156\157\162\155\141\154", 
"\163\164\141\155\151\156\141", "\163\160\145\145\144", "\150\145\141\144\137\141\156\147\154\145", 
"\153\151\143\153", "\144\141\163\150", "\164\165\162\156", "\163\141\171", 
"\164\165\162\156\137\156\145\143\153", "\142\145\146\157\162\145\137\153\151\143\153\137\157\146\146", 
"\164\151\155\145\137\157\166\145\162", "\160\154\141\171\137\157\156", "\144\162\157\160\137\142\141\154\154", 
"\153\151\143\153\137\157\146\146\137\154", "\153\151\143\153\137\157\146\146\137\162", 
"\153\151\143\153\137\151\156\137\154", "\153\151\143\153\137\151\156\137\162", 
"\146\162\145\145\137\153\151\143\153\137\162", "\146\162\145\145\137\153\151\143\153\137\154", 
"\146\162\145\145\137\153\151\143\153\137\146\141\165\154\164\137\162", "\146\162\145\145\137\153\151\143\153\137\146\141\165\154\164\137\154", 
"\143\157\162\156\145\162\137\153\151\143\153\137\162", "\143\157\162\156\145\162\137\153\151\143\153\137\154", 
"\147\157\141\154\137\153\151\143\153\137\162", "\147\157\141\154\137\153\151\143\153\137\154", null, null, 
"\146\157\165\154\137\162", "\146\157\165\154\137\154", "\157\146\146\163\151\144\145\137\162", 
"\157\146\146\163\151\144\145\137\154", "\150\141\154\146\137\164\151\155\145", "\164\151\155\145\137\165\160", 
"\164\151\155\145\137\165\160\137\167\151\164\150\157\165\164\137\141\137\164\145\141\155", "\164\151\155\145\137\145\170\164\145\156\144\145\144", null, "\50", "\51", 
"\40", "\156\141\156", null, null, null, null, null, null, null, null, "\42", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xf7fffffffffffff1L, 0x6L, 
};
static final long[] jjtoSkip = {
   0xeL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[109];
private final int[] jjstateSet = new int[218];
protected char curChar;
/** Constructor. */
public RobocupCmdParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public RobocupCmdParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 109; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
